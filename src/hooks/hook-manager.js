/**
 * Git hooks manager for Git Commit Genius
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Hook script templates
const PREPARE_COMMIT_MSG_HOOK = `#!/bin/sh
# Git Commit Genius hook
# This hook will automatically generate a commit message based on staged changes

# Check if this is an auto-generated commit message (merge, squash, etc.)
case "$2,$3" in
  merge,*|template,*|squash,*|message,*)
    # These are generated by Git with default messages, so we'll exit
    exit 0
    ;;
  *) ;;
esac

# Run Git Commit Genius in hook mode
npx git-commit-genius generate --hook

# Exit based on the result of the Git Commit Genius command
exit $?
`;

/**
 * Get the path to the Git hooks directory
 * @returns {string|null} - The path to the Git hooks directory or null if not in a Git repository
 */
function getHooksDir() {
  try {
    // Get the Git directory from the current repository
    const gitDir = execSync('git rev-parse --git-dir', { encoding: 'utf8' }).trim();
    return path.join(gitDir, 'hooks');
  } catch (error) {
    // Not in a Git repository
    return null;
  }
}

/**
 * Install Git hooks for Git Commit Genius
 * @returns {boolean} - True if successful, false otherwise
 */
function installHooks() {
  const hooksDir = getHooksDir();
  
  if (!hooksDir) {
    console.error('Not in a Git repository');
    return false;
  }
  
  // Create hooks directory if it doesn't exist
  if (!fs.existsSync(hooksDir)) {
    fs.mkdirSync(hooksDir, { recursive: true });
  }
  
  // Install prepare-commit-msg hook
  const prepareCommitMsgPath = path.join(hooksDir, 'prepare-commit-msg');
  
  try {
    // Write the hook script
    fs.writeFileSync(prepareCommitMsgPath, PREPARE_COMMIT_MSG_HOOK, { mode: 0o755 });
    return true;
  } catch (error) {
    console.error('Error installing hooks:', error.message);
    return false;
  }
}

/**
 * Remove Git hooks installed by Git Commit Genius
 * @returns {boolean} - True if successful, false otherwise
 */
function removeHooks() {
  const hooksDir = getHooksDir();
  
  if (!hooksDir) {
    console.error('Not in a Git repository');
    return false;
  }
  
  const prepareCommitMsgPath = path.join(hooksDir, 'prepare-commit-msg');
  
  try {
    // Check if our hook is installed by checking for our comment
    if (fs.existsSync(prepareCommitMsgPath)) {
      const content = fs.readFileSync(prepareCommitMsgPath, 'utf8');
      
      if (content.includes('Git Commit Genius hook')) {
        fs.unlinkSync(prepareCommitMsgPath);
      }
    }
    
    return true;
  } catch (error) {
    console.error('Error removing hooks:', error.message);
    return false;
  }
}

/**
 * Complete a hook operation with success or failure status
 * @param {boolean} success - Whether the hook operation was successful
 * @param {string} message - The commit message (if successful)
 */
function completeHook(success, message = '') {
  if (success && message) {
    // If successful, write the message to the file specified in the COMMIT_EDITMSG
    const commitMsgFile = process.env.GIT_COMMIT_MSG_FILE;
    if (commitMsgFile) {
      try {
        fs.writeFileSync(commitMsgFile, message);
      } catch (error) {
        console.error('Error writing commit message:', error.message);
      }
    }
  }
}

module.exports = {
  installHooks,
  removeHooks,
  completeHook
};
